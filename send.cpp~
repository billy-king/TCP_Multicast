/****************************
send.cpp
auto sends udp packets
*****************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include <pcap.h>
#include <netinet/in.h>
#include <netinet/ether.h>
#include <netinet/ip.h>
#include <netinet/tcp.h>
#include <arpa/inet.h>

#define MAX_PKT_SIZE 1512

typedef unsigned short u16;

//The first parameter is how long the u16 array is for the second parameter,
//and the second parameter is a u16 array of all the octets of 
u16 checksum(u16* headerData, int len){
	register int sum = 0;
	u_short answer = 0;
	register u_short *w = headerData;
	register int nleft = len;

	while(nleft > 1) {
		sum += *w++;
		nleft -= 2;
	}


	sum = (sum >> 16) + (sum & 0xFFFF);

	sum += (sum >> 16);
	answer = ~sum;
	return(answer);
}

int main(int argc, char **argv){
	pcap_t *indesc,*outdesc;
	char error[PCAP_ERRBUF_SIZE];
	const char *indesc_file = "trace_udp.pcap";
	const char *dev = "eth0";
	char *from_ip;
	u_int res;
	struct pcap_pkthdr *pktheader;
	const u_char *pktdata;
	struct iphdr *iph;

	if(argc != 2){
		printf("Error: must input 2 parameters!\n");
		return 1;
	} else {
		from_ip = argv[1];
	}

	/* Open the capture */
    	if((indesc = pcap_open_offline(indesc_file, error)) == NULL){
        	printf("Error opening the input file: %s\n", error);
        	return 1;
    	}

	/* Open the output adapter */
    	if((outdesc = pcap_open_live(dev, 65535, 1, 1000, error) ) == NULL){
        	printf("Error opening adapter: %s\n", error);
        	return 1;
    	}

	while((res = pcap_next_ex( indesc, &pktheader, &pktdata)) == 1){
		if(pktheader->len <= MAX_PKT_SIZE) {
			struct iphdr *new_iph;
			struct in_addr from_addr, to_addr;
			struct tcphdr *tcph;
			u_char new_data[MAX_PKT_SIZE];
			
			memcpy(new_data, pktdata, pktheader->len);
			new_iph = (struct iphdr*) (new_data + sizeof(struct ethhdr));

			inet_aton(from_ip, &from_addr);
			inet_aton("192.168.254.2", &to_addr);
			new_iph->saddr = from_addr.s_addr;
			new_iph->daddr = to_addr.s_addr;
			new_iph->check = checksum((u16*)  new_iph, sizeof(struct iphdr));

			printf("From: %s\n", inet_ntoa(from_addr));
			printf("  To: %s\n", inet_ntoa(to_addr));

			tcph = (struct tcphdr*) (new_iph + sizeof(struct iphdr));
			

			//printf("Sending packet...\n");
			//while(true)
			//pcap_sendpacket(outdesc, new_data, pktheader->len);

			break;
		}
	}
	return 0;
}
